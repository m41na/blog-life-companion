package works.hop.jdbc.i_2_insert_embedded;

import works.hop.jdbc.i_0_insert.EntityMappingException;

import java.util.Optional;
import java.util.Set;

public abstract class EntityMetadata {

    final String tableName;
    final Set<ColumnInfo> columns;

    public EntityMetadata(String tableName, Set<ColumnInfo> columns) {
        this.tableName = tableName;
        this.columns = columns;
    }

    public abstract <T extends Entity> T entityInstance();

    public Optional<ColumnInfo> resolveByColumnName(String columnName) {
        return columns.stream()
                .filter(info -> info.columnName != null)
                .filter(info -> info.columnName.equals(columnName))
                .findFirst();
    }

    public Object[] resolveQueryParameters(String[] columnNames, Entity entity) {
        Object[] parameters = new Object[columnNames.length];
        for (int i = 0; i < parameters.length; i++) {
            String columnName = columnNames[i];
            String attributeName = resolveByColumnName(columnName).orElseThrow(() ->
                    new EntityMappingException(String.format("There is no mapping for column %s in the metadata", columnName))).attributeName;
            parameters[i] = entity.get(attributeName);
        }
        return parameters;
    }

    public String resolveGeneratedColumnName() {
        Optional<ColumnInfo> optional = columns.stream().filter(info -> info.isAutoGenerated).findFirst();
        if (optional.isPresent()) {
            return optional.get().columnName;
        }
        throw new EntityMappingException("There is no auto-generated column defined in the metadata");
    }

    public Class<?> resolveGeneratedColumnType(String columnName) {
        return resolveByColumnName(columnName).orElseThrow(() ->
                new EntityMappingException(String.format("There is no mapping for column %s in the metadata", columnName))).attributeType;
    }
}
