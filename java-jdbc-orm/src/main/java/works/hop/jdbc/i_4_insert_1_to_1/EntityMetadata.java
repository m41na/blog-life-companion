package works.hop.jdbc.i_4_insert_1_to_1;

import works.hop.jdbc.i_0_insert.EntityMappingException;

import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public abstract class EntityMetadata {

    final String tableName;
    final EntityType entityType;
    final Set<ColumnInfo> columns;

    public EntityMetadata(Class<? extends Entity> entityClass, String tableName, Set<ColumnInfo> columns) {
        this(entityClass, tableName, columns, EntityType.IDENTIFIABLE);
    }

    public EntityMetadata(Class<? extends Entity> entityClass, String tableName, Set<ColumnInfo> columns, EntityType entityType) {
        this.tableName = tableName;
        this.entityType = entityType;
        this.columns = columns;
        EntityRegistry.registry.put(entityClass, this);
    }

    public abstract <T extends Entity> T entityInstance();

    public Optional<ColumnInfo> resolveByColumnName(String columnName) {
        return columns.stream()
                .filter(info -> info.columnName != null)
                .filter(info -> info.columnName.equals(columnName))
                .findFirst();
    }

    public ColumnInfo pkColumn() {
        return columns.stream().filter(info -> info.isPkColumn != null && info.isPkColumn).findFirst().orElseThrow();
    }

    public Boolean containsPkColumn() {
        return columns.stream().anyMatch(info -> info.isPkColumn != null && info.isPkColumn);
    }

    public boolean containsEmbedded() {
        return columns.stream().anyMatch(info -> info.isEmbedded);
    }

    public List<ColumnInfo> embeddedColumns() {
        return columns.stream().filter(info -> info.isEmbedded).collect(Collectors.toList());
    }

    public boolean containsCompositePk() {
        return columns.stream().anyMatch(info -> info.isCompositePk);
    }

    public ColumnInfo compositePkColumn() {
        return columns.stream().filter(info -> info.isCompositePk).findFirst().orElseThrow(
                () -> new EntityMappingException("There is no composite pk key column defined in the metadata")
        );
    }

    public boolean containsGenerated() {
        return columns.stream().anyMatch(info -> info.isAutoGenerated);
    }

    public ColumnInfo generatedColumn() {
        return columns.stream().filter(info -> info.isAutoGenerated).findFirst().orElseThrow(
                () -> new EntityMappingException("There is no auto-generated column defined in the metadata"));
    }

    public boolean containsFkColumns() {
        return columns.stream().anyMatch(info -> info.isFkColumn);
    }

    public List<ColumnInfo> fkColumns() {
        return columns.stream().filter(info -> info.isFkColumn).collect(Collectors.toList());
    }

    public String createInsertQuery(String[] columnNames) {
        //"insert into :TABLE_NAME (f:COLUMN_NAMES) value (:PLACEHOLDERS)";
        StringBuilder builder = new StringBuilder();
        builder.append("insert into ").append(tableName).append(" (");
        for (int i = 0; i < columnNames.length; i++) {
            String columnName = columnNames[i];
            builder.append(columnName);
            if (i + 1 < columnNames.length) {
                builder.append(", ");
            }
        }
        builder.append(") values (")
                .append(IntStream.range(0, columnNames.length).mapToObj(i -> "?").collect(Collectors.joining(",")))
                .append(")");
        return builder.toString();
    }
}
